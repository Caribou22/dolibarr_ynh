#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=2

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
admin=$(ynh_app_setting_get --app=$app --key=admin)
is_public=$(ynh_app_setting_get --app=$app --key=is_public)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
language=$(ynh_app_setting_get --app=$app --key=language)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
current_version=$(ynh_app_setting_get --app=$app --key=version)
update_version=$(ynh_app_upstream_version "../manifest.json")
datadir=$final_path/documents/

fpm_footprint=$(ynh_app_setting_get --app=$app --key=fpm_footprint)
fpm_usage=$(ynh_app_setting_get --app=$app --key=fpm_usage)

#=================================================
# CHECK VERSION
#=================================================

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set --app=$app --key=is_public --value=1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set --app=$app --key=is_public --value=0
	is_public=0
else
	ynh_app_setting_set --app=$app --key=is_public --value=0
	is_public=0
fi

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid --db_name=$app)
	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

# If fpm_footprint doesn't exist, create it
if [ -z "$fpm_footprint" ]; then
	fpm_footprint=medium
	ynh_app_setting_set --app=$app --key=fpm_footprint --value=$fpm_footprint
fi

# If fpm_usage doesn't exist, create it
if [ -z "$fpm_usage" ]; then
	fpm_usage=medium
	ynh_app_setting_set --app=$app --key=fpm_usage --value=$fpm_usage
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=11

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
# N.B. : this is for app installations before YunoHost 2.7
# where this value might be something like /foo/ or foo/
# instead of /foo ....
# If nobody installed your app before 2.7, then you may
# safely remove this line
path_url=$(ynh_normalize_url_path --path_url=$path_url)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --weight=70

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$final_path"
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading nginx web server configuration..." --weight=1

# Create a dedicated nginx config
ynh_add_nginx_config YNH_PHP_VERSION

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading php-fpm configuration..." --weight=2

# Delete old static pool.d conf
old_php_version=7.0
if [ -f "/etc/php/$old_php_version/fpm/pool.d/$app.conf" ]; then
	ynh_secure_remove --file="/etc/php/$old_php_version/fpm/pool.d/$app.conf"
fi

# Create a dedicated php-fpm config
ynh_add_fpm_config --usage=$fpm_usage --footprint=$fpm_footprint --phpversion=$YNH_PHP_VERSION --package="$extra_php_dependencies"


#=================================================
# SPECIFIC UPGRADE
#=================================================
# LAUNCH UPGRADE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading app from $current_version to $update_version" --weight=3

	chown -R $app: "$final_path"

	# Remove the lock if it exists
	lock=$final_path/documents/install.lock
	if [ -f $lock ]
	then
		ynh_secure_remove $lock
	fi
	
	mkdir -p /var/log/$app/

	# Upgrade with CURL
	pushd $final_path/htdocs/install/
	if php upgrade.php $current_version $update_version > /var/log/$app/upgrade.html;  then
		ynh_print_info --message="Step 1 upgrading ended successfully"
	else
		ynh_print_warn --message="Step 1 upgrading ended with error"
	fi
	if php upgrade2.php $current_version $update_version > /var/log/$app/upgrade2.html; then
		ynh_print_info --message="Step 2 upgrading ended successfully"
	else
		ynh_print_warn --message="Step 2 upgrading ended with error"
	fi
	if php step5.php $current_version $update_version > /var/log/$app/upgrade3.html; then
		ynh_print_info --message="Step 3 upgrading ended successfully"
	else
		ynh_print_warn --message="Step 3 upgrading ended with error"
	fi
	
	ynh_app_setting_set --app=$app --key=version --value=$update_version

	popd
fi

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================

ynh_backup_if_checksum_is_different --file="$final_path/htdocs/conf/conf.php"
# Recalculate and store the checksum of the file for the next upgrade.
ynh_store_file_checksum --file="$final_path/htdocs/conf/conf.php"

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..." --weight=1

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions on app files
chown -R root: "$final_path"
chmod 644 "$final_path/htdocs/conf/conf.php"
mkdir -p "$datadir"
chown -R $app: "$datadir"
chmod go-w $datadir

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Upgrading SSOwat configuration..." --weight=1

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway
	ynh_app_setting_set --app=$app --key=unprotected_uris --value="/"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
